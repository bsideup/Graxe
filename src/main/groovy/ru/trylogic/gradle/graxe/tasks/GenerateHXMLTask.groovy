package ru.trylogic.gradle.graxe.tasks

import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.artifacts.ProjectDependency
import org.gradle.api.artifacts.ResolvedArtifact
import org.gradle.api.plugins.BasePlugin
import org.gradle.api.tasks.TaskAction
import org.gradle.util.GFileUtils
import ru.trylogic.gradle.graxe.GraxePlugin
import ru.trylogic.gradle.graxe.extensions.HaxeExtension
import ru.trylogic.gradle.graxe.extensions.Target
import ru.trylogic.gradle.graxe.source.HaxeSourceSetContainer

class GenerateHXMLTask extends DefaultTask {
    
    static final String NAME = "generateHxml"

    GenerateHXMLTask() {
        group = BasePlugin.BUILD_GROUP
        
        dependsOn UnpackDependenciesTask.NAME
        
        project.afterEvaluate {
            def haxeExtension = project.extensions.getByName(HaxeExtension.NAME) as HaxeExtension

            if(haxeExtension.targets.isEmpty()) {
                haxeExtension.targets.create(Target.Kind.NEKO.name())
            }
        }
    }
    
    @TaskAction
    void run() {
        def haxeExtension = project.extensions.getByName(HaxeExtension.NAME) as HaxeExtension
        
        def classPath = getProjectClassPath(project, project)
        assert classPath.size() > 0, "Project should have at least one classPath";
        String cpString = classPath.collect { "-cp $it\n" }.join("")
        
        String libString = getProjectLibs(project, project).collect { ResolvedArtifact it -> "-lib ${it.name}:${it.moduleVersion.id.version}\n" }.join("")

        String content = "#Auto-generated by Graxe\n"
        
        content += haxeExtension.targets.collect { Target target ->
            String targetString = cpString;
            targetString += libString;
            if(target.mainClass != null) {
                targetString += "-main ${target.mainClass}\n"
            } else {
                targetString += "-main tools.haxelib.Main\n"; //FIXME fuck Haxe!
                targetString += "-D no-compilation\n"
            }
            targetString += "-${target.kind.compilerKey} ${target.finalName}\n";
            return targetString
        }.join("\n--next\n")
        
        def hxmlFile = haxeExtension.hxmlFile
        GFileUtils.parentMkdirs(hxmlFile)
        GFileUtils.writeFile(content, hxmlFile)
    }

    protected Set<String> getProjectClassPath(Project parentProject, Project forProject) {
        assert forProject != null

        Set<String> result = forProject.extensions.findByType(HaxeSourceSetContainer)?.findByName(GraxePlugin.MAIN_CONFIGURATION_NAME)?.haxe?.srcDirs?.collect {
            return GFileUtils.relativePath(parentProject.buildDir, it)
        }

        result = result ?: [];

        forProject.configurations.findByName(GraxePlugin.COMPILE_CONFIGURATION_NAME)?.dependencies?.withType(ProjectDependency)?.each {
            result.addAll(getProjectClassPath(parentProject, it.dependencyProject))
        }

        return result;
    }

    protected Set<ResolvedArtifact> getProjectLibs(Project parentProject, Project forProject) {
        assert forProject != null

        Set<ResolvedArtifact> result = [];

        def compileConfiguration = forProject.configurations.findByName(GraxePlugin.COMPILE_CONFIGURATION_NAME)

        if(compileConfiguration != null) {
            compileConfiguration.dependencies.each {
                if (it instanceof ProjectDependency) {
                    result.addAll(getProjectLibs(parentProject, it.dependencyProject))
                }
            }

            compileConfiguration.resolvedConfiguration.resolvedArtifacts?.each {
                result.add(it)
            }
        }

        return result;
    }
}
